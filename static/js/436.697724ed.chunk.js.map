{"version":3,"file":"static/js/436.697724ed.chunk.js","mappings":"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","sources":["components/Cart/Cart.jsx","components/CartList/CartList.styled.jsx","components/CartList/CartList.jsx","components/ClientForm/ClientForm.styled.jsx","components/ClientForm/ClientForm.jsx","pages/CartPage/Cart.styled.jsx","pages/CartPage/CartPage.jsx"],"sourcesContent":["import Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nconst Cart = ({ orders }) => {\n  const { dish, img, price, quantity } = orders;\n  return (\n    <Card sx={{ maxWidth: 345 }}>\n      <CardMedia\n        component=\"img\"\n        alt={dish}\n        height=\"140\"\n        width=\"200\"\n        image={img}\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\n          {dish}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {price}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">-</Button>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {quantity}\n        </Typography>\n        <Button size=\"small\">+</Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Cart;\n","import styled from '@emotion/styled';\n\nexport const CartWrap = styled.ul`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  gap: 30px;\n  list-style-type: none;\n\n  @media screen and (min-width: 768px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 30px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    gap: 48px;\n  }\n`;\n\nexport const OrderList = styled.li`\n  width: 220px;\n`;\n","import React from 'react';\n\nimport Cart from '../Cart/Cart';\nimport { OrderList, CartWrap } from './CartList.styled';\n\nconst CartList = ({ cart }) => {\n  return (\n    <CartWrap>\n      {cart.map((cartItem, index) => {\n        return (\n          <OrderList key={`${index}_${cartItem.id}`}>\n            <Cart orders={cartItem} />\n          </OrderList>\n        );\n      })}\n    </CartWrap>\n  );\n};\n\nexport default CartList;\n","import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\n\nexport const Error = styled(ErrorMessage)`\n  color: #1f2029;\n  text-align: center;\n`;\n\nexport const FormWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 10px;\n`;\n\nexport const OrdersWrap = styled.div`\n  display: flex;\n`;\n\nexport const CartWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 50px;\n`;\n\nexport const Input = styled(Field)`\n  width: 300px;\n  font-size: 16px;\n  border-radius: 5px;\n  padding: 13px 20px;\n  padding-left: 55px;\n  font-weight: 500;\n  border-radius: 4px;\n  line-height: 22px;\n  letter-spacing: 0.5px;\n  outline: none;\n  color: #1f2029;\n  border: 1px solid #1f2029;\n  transition: all 200ms linear;\n`;\n\nexport const LabelInput = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  color: #1f2029;\n`;\nexport const BtnSubmit = styled.button`\n  border-radius: 4px;\n  height: 44px;\n  font-size: 16px;\n  font-weight: 600;\n  text-transform: uppercase;\n  transition: all 200ms linear;\n  padding: 0 30px;\n  letter-spacing: 1px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border: none;\n  cursor: pointer;\n  background-color: #ffeba7;\n  color: #102770;\n  box-shadow: 0 8px 24px 0 rgba(255, 235, 167, 0.2);\n\n  &:focus,\n  &:hover {\n    background-color: #102770;\n    color: #ffeba7;\n    box-shadow: 0 8px 24px 0 rgba(16, 39, 112, 0.2);\n  }\n`;\n\nexport const IconUser = styled.i`\n  position: relative;\n  top: 0;\n  left: 10%;\n  font-size: 18px;\n  color: #ffeba7;\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 5px;\n`;\n\nexport const TitleLable = styled.span`\n  margin-left: 20px;\n`;\n","import { Formik, Form } from 'formik';\nimport { useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport CartList from '../CartList/CartList';\nimport {\n  BtnSubmit,\n  Error,\n  FormWrap,\n  Input,\n  InputContainer,\n  LabelInput,\n  TitleLable,\n  CartWrap,\n  OrdersWrap,\n} from './ClientForm.styled';\n\nconst RegisterSchema = yup.object().shape({\n  name: yup\n    .string(' Name may contain only letters, apostrophe, dash and spaces.')\n    .required('Name is required field.'),\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required field.'),\n  phone: yup\n    .string('Enter your password')\n    .min(7, 'Phone should be of minimum 7 characters length')\n    .required('Phone is required field, min 7 characters'),\n  adress: yup.string('Enter your adress').required('Adress is required field.'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  phone: '',\n  adress: '',\n};\n\nconst ClientForm = () => {\n  const cart = useSelector(state => state.cart);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={RegisterSchema}\n      onSubmit={async values => {\n        await new Promise(r => setTimeout(r, 500));\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      <Form autoComplete=\"off\">\n        <CartWrap>\n          <FormWrap>\n            <LabelInput>\n              <TitleLable>Name</TitleLable>\n              <InputContainer>\n                <Input type=\"text\" name=\"name\" />\n              </InputContainer>\n              <Error name=\"name\" component=\"div\" />\n            </LabelInput>\n            <LabelInput>\n              <TitleLable>Email</TitleLable>\n              <InputContainer>\n                <Input type=\"email\" name=\"email\" />\n              </InputContainer>\n              <Error name=\"email\" component=\"div\" />\n            </LabelInput>\n            <LabelInput>\n              <TitleLable>Phone</TitleLable>\n              <InputContainer>\n                <Input type=\"phone\" name=\"phone\" />\n              </InputContainer>\n              <Error name=\"phone\" component=\"div\" />\n            </LabelInput>\n            <LabelInput>\n              <TitleLable>Adress</TitleLable>\n              <InputContainer>\n                <Input type=\"adress\" name=\"adress\" />\n              </InputContainer>\n              <Error name=\"adress\" component=\"div\" />\n            </LabelInput>\n          </FormWrap>\n\n          <OrdersWrap>\n            <h2>My cart</h2>\n            {cart.cartItems.lenght === 0 ? (\n              <p>EMPTY cart</p>\n            ) : (\n              <CartList cart={cart.cartItems} />\n            )}\n          </OrdersWrap>\n        </CartWrap>\n        <BtnSubmit type=\"submit\">Submit</BtnSubmit>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ClientForm;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.section`\n  display: flex;\n  justify-content: space-evenly;\n  text-align: center;\n  margin: 0 auto;\n  width: fit-content;\n  padding: 60px 30px;\n  gap: 50px;\n`;\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  padding: 20px 10px;\n`;\n","import ClientForm from '../../components/ClientForm/ClientForm';\nimport { FormContainer, Container } from './Cart.styled';\n// import { useFetchMenuQuery } from '../../redux/dishesSlice';\n\nconst Cart = () => {\n  return (\n    <>\n      <Container>\n        <FormContainer>\n          <ClientForm />\n        </FormContainer>\n      </Container>\n    </>\n  );\n};\n\nexport default Cart;\n"],"names":["_ref","orders","dish","img","price","quantity","_jsxs","Card","sx","maxWidth","children","_jsx","CardMedia","component","alt","height","width","image","CardContent","Typography","gutterBottom","variant","color","CardActions","Button","size","CartWrap","styled","_templateObject","_taggedTemplateLiteral","OrderList","_templateObject2","cart","map","cartItem","index","Cart","concat","id","Error","ErrorMessage","FormWrap","OrdersWrap","_templateObject3","_templateObject4","Input","Field","_templateObject5","LabelInput","_templateObject6","BtnSubmit","_templateObject7","InputContainer","_templateObject8","_templateObject9","TitleLable","_templateObject10","RegisterSchema","yup","shape","name","required","email","phone","min","adress","initialValues","useSelector","state","Formik","validationSchema","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","Promise","r","setTimeout","alert","JSON","stringify","stop","_x","apply","arguments","Form","autoComplete","type","cartItems","lenght","CartList","Container","FormContainer","_Fragment","ClientForm"],"sourceRoot":""}